syntax = "proto3";

option go_package = "../raftkv";
package raftkv;

message State {
    int32 term = 1;
    bool isLeader = 2; 
}

message KeyValue {
    string key = 1;
    string value = 2;
    int64 ClientId = 3;
    int64 RequestId = 4;
}

message GetKey {
    string key = 1;
    int64 ClientId = 2;
    int64 RequestId = 3;
}

message Reply {
    bool wrongLeader = 1;
    string error = 2;
    string value = 3;
}

message Empty {

}

message IntegerArg {
    int32 arg = 1;
}

message LogEntry {
    string key = 1;
    string value = 2;
    int32 term = 3;
}

message AppendEntriesRequest {
    int32 leaderId = 1;
    int32 term = 2;
    int32 prefixLength = 3;
    int32 prefixTerm = 4;
    int32 leaderCommit = 5;
    repeated LogEntry entries = 6;
} 

message AppendEntriesReply {
    int32 term = 1;
    int32 newAckedLength = 2;
    int32 success = 3;
}

message VoteRequest {
    int32 term = 1;
    int32 candidateId = 2;
    int32 lastLogIndex = 3;
    int32 lastLogTerm = 4;
}

message VoteReply {
    int32 term = 1;
    bool voteGranted = 2;
}

service KeyValueStore {
    rpc GetState(Empty) returns (State) {};
    rpc Get(GetKey) returns (Reply) {};
    rpc Put(KeyValue) returns (Reply){};
    rpc Replace(KeyValue) returns (Reply){};
}

service Raft {
    rpc RequestVote(VoteRequest) returns (VoteReply) {};
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesReply) {};
}
service FrontEnd {
    rpc Get(GetKey) returns (Reply) {};
    rpc Put(KeyValue) returns (Reply){};
    rpc Replace(KeyValue) returns (Reply){};
    rpc StartRaft(IntegerArg) returns (Reply){};
}